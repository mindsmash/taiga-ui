function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _templateObject6(){var e=_taggedTemplateLiteral([":\u241f0dc56b110b85e3f82dc8a031661e63c1bb5ac2c4\u241f4928000514802786074:Material icons"]);return _templateObject6=function(){return e},e}function _templateObject5(){var e=_taggedTemplateLiteral([":\u241f69b2559c3aab1471ba434cae29edf4b61353b396\u241f8273797278283997213: If you want to bundle your icons, you need to provide ",":START_TAG_CODE:TUI_ICONS",":CLOSE_TAG_CODE: token with a dictionary of name to source code. If you want to move your icons to assets you need to process them with ",":START_LINK:this script",":CLOSE_LINK:. Drop it to the folder with your icons and run ",":START_TAG_CODE:node process-icons.js",":CLOSE_TAG_CODE:. Then move your icons to the assets folder and provide ",":START_TAG_CODE:TUI_ICONS_PATH",":CLOSE_TAG_CODE: as seen in example below: "]);return _templateObject5=function(){return e},e}function _templateObject4(){var e=_taggedTemplateLiteral([":\u241f3c22b929ddcf326204f9e406b9e4f2c08f507152\u241f4191926846451272027: There are two ways to add icons: bundled and as assets. Bundled icons have the benefit of immediate display but increase your app size. Assets work like regular ",':START_TAG_CODE:img src="xxx"',":CLOSE_TAG_CODE: with all the benefits of caching. In both cases you can control color with CSS ",":START_TAG_CODE:color",":CLOSE_TAG_CODE: style. "]);return _templateObject4=function(){return e},e}function _templateObject3(){var e=_taggedTemplateLiteral([":\u241fe2163c2ddba5bf475f2ed90897b3a496f7ba87c1\u241f1098592464017048252: These are keys of following dictionaries: ",":START_TAG_CODE:tuiCoreIcons",":CLOSE_TAG_CODE: and ",":START_TAG_CODE:tuiKitIcons",":CLOSE_TAG_CODE:. It is not required to provide all those icons, you can gradually add the ones you need depending on components you use. "]);return _templateObject3=function(){return e},e}function _templateObject2(){var e=_taggedTemplateLiteral([":\u241fab9473704d948dc4c33c0e2e6ad00f96b4888542\u241f7423318878179846861: Taiga UI uses ",":START_LINK:",":START_TAG_CODE:tui-svg",":CLOSE_TAG_CODE:",":CLOSE_LINK: component to display SVG icons. It can show icons by name, link or source code. Several icon names are hardcoded into kit components so if you want to switch to a different icon set you would need to provide a mapping. "]);return _templateObject2=function(){return e},e}function _templateObject(){var e=_taggedTemplateLiteral([":\u241fc08189fb00c55f045ae49b6c01419138998d0e41\u241f8811200965267882277:Icons set"]);return _templateObject=function(){return e},e}function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{JSON:function(e,t,n){"use strict";n.r(t),n.d(t,"IconSetModule",(function(){return R}));var o=n("HHFY"),a=n("2kYt"),r=n("nIj0"),i=n("sEIs"),c=n("SVIu"),l=n("Qq0t"),s=n("dvRg"),u=n("4C5Q"),d=n("EM62"),p=n("OZlg"),m=n("yZWP"),f=n("zV1d"),_=n("fRC/"),b=n("aPft"),y=n("iyc4"),g=n("Yj6K"),T=n("RlDx"),C=n("eB8V"),h={tuiIconCalendarLarge:"date_range-24px",tuiIconTooltipLarge:"help-24px",tuiIconInfo:"info-16px",tuiIconCloseLarge:"clear-24px",tuiIconChevronLeftLarge:"keyboard_arrow_left-24px",tuiIconChevronRightLarge:"keyboard_arrow_right-24px"};function S(e){return"assets/icons/".concat(h[e],".svg#").concat(h[e])}var O,x,v,E,I,A=((O=function e(){_classCallCheck(this,e),this.date=null}).\u0275fac=function(e){return new(e||O)},O.\u0275cmp=d["\u0275\u0275defineComponent"]({type:O,selectors:[["tui-icon-set-example-1"]],features:[d["\u0275\u0275ProvidersFeature"]([{provide:l.TUI_ICONS_PATH,useValue:S}])],decls:8,vars:2,consts:[[1,"b-form"],["tuiHintContent","You can use any icons you want",1,"tui-space_top-4",3,"tuiTextfieldCleaner","ngModel","ngModelChange"]],template:function(e,t){1&e&&(d["\u0275\u0275elementStart"](0,"div",0),d["\u0275\u0275elementStart"](1,"tui-notification"),d["\u0275\u0275text"](2," As usual with the DI this is hierarchical. Meaning you can provide different "),d["\u0275\u0275elementStart"](3,"code"),d["\u0275\u0275text"](4,"TUI_ICONS_PATH"),d["\u0275\u0275elementEnd"](),d["\u0275\u0275text"](5," and use different icons across your app. "),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementStart"](6,"tui-input-date-range",1),d["\u0275\u0275listener"]("ngModelChange",(function(e){return t.date=e})),d["\u0275\u0275text"](7," Pick your favorite date range "),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementEnd"]()),2&e&&(d["\u0275\u0275advance"](6),d["\u0275\u0275property"]("tuiTextfieldCleaner",!0)("ngModel",t.date))},directives:[b.a,g.a,T.a,C.b,r.NgControlStatus,r.NgModel],encapsulation:2}),O),w=n("ER+R"),k=["header","Icons set"];x=" Taiga UI uses " + "\ufffd#4\ufffd" + "" + "\ufffd#5\ufffd" + "tui-svg" + "\ufffd/#5\ufffd" + "" + "\ufffd/#4\ufffd" + " component to display SVG icons. It can show icons by name, link or source code. Several icon names are hardcoded into kit components so if you want to switch to a different icon set you would need to provide a mapping. ",v=" These are keys of following dictionaries: " + "[\ufffd#14\ufffd|\ufffd#15\ufffd]" + "tuiCoreIcons" + "[\ufffd/#14\ufffd|\ufffd/#15\ufffd]" + " and " + "[\ufffd#14\ufffd|\ufffd#15\ufffd]" + "tuiKitIcons" + "[\ufffd/#14\ufffd|\ufffd/#15\ufffd]" + ". It is not required to provide all those icons, you can gradually add the ones you need depending on components you use. ",v=d["\u0275\u0275i18nPostprocess"](v),E=" There are two ways to add icons: bundled and as assets. Bundled icons have the benefit of immediate display but increase your app size. Assets work like regular " + "[\ufffd#18\ufffd|\ufffd#19\ufffd]" + "img src=\"xxx\"" + "[\ufffd/#18\ufffd|\ufffd/#19\ufffd]" + " with all the benefits of caching. In both cases you can control color with CSS " + "[\ufffd#18\ufffd|\ufffd#19\ufffd]" + "color" + "[\ufffd/#18\ufffd|\ufffd/#19\ufffd]" + " style. ",E=d["\u0275\u0275i18nPostprocess"](E),I=" If you want to bundle your icons, you need to provide " + "[\ufffd#30\ufffd|\ufffd#32\ufffd|\ufffd#33\ufffd]" + "TUI_ICONS" + "[\ufffd/#30\ufffd|\ufffd/#32\ufffd|\ufffd/#33\ufffd]" + " token with a dictionary of name to source code. If you want to move your icons to assets you need to process them with " + "\ufffd#31\ufffd" + "this script" + "\ufffd/#31\ufffd" + ". Drop it to the folder with your icons and run " + "[\ufffd#30\ufffd|\ufffd#32\ufffd|\ufffd#33\ufffd]" + "node process-icons.js" + "[\ufffd/#30\ufffd|\ufffd/#32\ufffd|\ufffd/#33\ufffd]" + ". Then move your icons to the assets folder and provide " + "[\ufffd#30\ufffd|\ufffd#32\ufffd|\ufffd#33\ufffd]" + "TUI_ICONS_PATH" + "[\ufffd/#30\ufffd|\ufffd/#32\ufffd|\ufffd/#33\ufffd]" + " as seen in example below: ",I=d["\u0275\u0275i18nPostprocess"](I);var L=["heading","Material icons"];function j(e,t){if(1&e&&(d["\u0275\u0275elementStart"](0,"tui-doc-copy",9),d["\u0275\u0275elementStart"](1,"code"),d["\u0275\u0275text"](2),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementEnd"]()),2&e){var n=t.$implicit;d["\u0275\u0275property"]("cdkCopyToClipboard",n),d["\u0275\u0275advance"](2),d["\u0275\u0275textInterpolate"](n)}}var P,M,D=((M=function(){function e(){_classCallCheck(this,e),this.example1={TypeScript:"import {Component} from '@angular/core';\nimport {TUI_ICONS_PATH} from '@taiga-ui/core';\n\nconst MAPPER: Record<string, string> = {\n    tuiIconCalendarLarge: 'date_range-24px',\n    tuiIconTooltipLarge: 'help-24px',\n    tuiIconInfo: 'info-16px',\n    tuiIconCloseLarge: 'clear-24px',\n    tuiIconChevronLeftLarge: 'keyboard_arrow_left-24px',\n    tuiIconChevronRightLarge: 'keyboard_arrow_right-24px',\n    // and so on\n};\n\n// This assumes that icons were properly processed\nexport function iconsPath(name: string): string {\n    return `assets/icons/${MAPPER[name]}.svg#${MAPPER[name]}`;\n}\n\n@Component({\n    selector: 'tui-icon-set-example-1',\n    templateUrl: './index.html',\n    providers: [\n        {\n            provide: TUI_ICONS_PATH,\n            useValue: iconsPath,\n        },\n    ],\n})\nexport class TuiIconSetExample1 {\n    date = null;\n}\n",HTML:'<div class="b-form">\n    <tui-notification>\n        As usual with the DI this is hierarchical. Meaning you can provide\n        different <code>TUI_ICONS_PATH</code> and use different icons across\n        your app.\n    </tui-notification>\n    <tui-input-date-range\n        class="tui-space_top-4"\n        tuiHintContent="You can use any icons you want"\n        [tuiTextfieldCleaner]="true"\n        [(ngModel)]="date"\n    >\n        Pick your favorite date range\n    </tui-input-date-range>\n</div>\n'},this.names=[].concat(_toConsumableArray(Object.keys(u.tuiCoreIcons)),_toConsumableArray(Object.keys(u.tuiKitIcons))),this.expanded=!1}return _createClass(e,[{key:"toggle",value:function(){this.expanded=!this.expanded}}]),e}()).\u0275fac=function(e){return new(e||M)},M.\u0275cmp=d["\u0275\u0275defineComponent"]({type:M,selectors:[["icon-set"]],decls:37,vars:3,consts:[[6,"header"],["tuiLink","","routerLink","/tui-svg"],["tuiButton","",3,"click"],[3,"expanded"],[1,"wrapper"],[3,"cdkCopyToClipboard",4,"ngFor","ngForOf"],["status","warning"],["tuiLink","","download","process-icons.js","href","assets/process-icons.js"],["id","material",3,"content",6,"heading"],[3,"cdkCopyToClipboard"]],template:function(e,t){1&e&&(d["\u0275\u0275elementStart"](0,"tui-doc-page",0),d["\u0275\u0275i18nAttributes"](1,k),d["\u0275\u0275elementStart"](2,"p"),d["\u0275\u0275i18nStart"](3,x),d["\u0275\u0275elementStart"](4,"a",1),d["\u0275\u0275element"](5,"code"),d["\u0275\u0275elementEnd"](),d["\u0275\u0275i18nEnd"](),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementStart"](6,"p"),d["\u0275\u0275elementStart"](7,"button",2),d["\u0275\u0275listener"]("click",(function(){return t.toggle()})),d["\u0275\u0275text"](8,"Show names"),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementStart"](9,"tui-expand",3),d["\u0275\u0275elementStart"](10,"div",4),d["\u0275\u0275template"](11,j,3,2,"tui-doc-copy",5),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementStart"](12,"p"),d["\u0275\u0275i18nStart"](13,v),d["\u0275\u0275element"](14,"code"),d["\u0275\u0275element"](15,"code"),d["\u0275\u0275i18nEnd"](),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementStart"](16,"p"),d["\u0275\u0275i18nStart"](17,E),d["\u0275\u0275element"](18,"code"),d["\u0275\u0275element"](19,"code"),d["\u0275\u0275i18nEnd"](),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementStart"](20,"tui-notification",6),d["\u0275\u0275text"](21," Make sure you mark regions in your icons that need to be colored with "),d["\u0275\u0275elementStart"](22,"code"),d["\u0275\u0275text"](23,'fill="currentColor"'),d["\u0275\u0275elementEnd"](),d["\u0275\u0275text"](24," or "),d["\u0275\u0275elementStart"](25,"code"),d["\u0275\u0275text"](26,'stroke="currentColor"'),d["\u0275\u0275elementEnd"](),d["\u0275\u0275text"](27,". "),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementStart"](28,"p"),d["\u0275\u0275i18nStart"](29,I),d["\u0275\u0275element"](30,"code"),d["\u0275\u0275element"](31,"a",7),d["\u0275\u0275element"](32,"code"),d["\u0275\u0275element"](33,"code"),d["\u0275\u0275i18nEnd"](),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementStart"](34,"tui-doc-example",8),d["\u0275\u0275i18nAttributes"](35,L),d["\u0275\u0275element"](36,"tui-icon-set-example-1"),d["\u0275\u0275elementEnd"](),d["\u0275\u0275elementEnd"]()),2&e&&(d["\u0275\u0275advance"](9),d["\u0275\u0275property"]("expanded",t.expanded),d["\u0275\u0275advance"](2),d["\u0275\u0275property"]("ngForOf",t.names),d["\u0275\u0275advance"](23),d["\u0275\u0275property"]("content",t.example1))},directives:[p.a,m.a,i.e,f.a,_.a,a.s,b.a,y.a,A,w.a,o.a],styles:[".wrapper[_ngcontent-%COMP%]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}"],changeDetection:0}),M),R=((P=function e(){_classCallCheck(this,e)}).\u0275mod=d["\u0275\u0275defineNgModule"]({type:P}),P.\u0275inj=d["\u0275\u0275defineInjector"]({factory:function(e){return new(e||P)},imports:[[a.c,r.FormsModule,o.c,c.h,l.TuiLinkModule,l.TuiExpandModule,l.TuiButtonModule,s.TuiInputDateRangeModule,l.TuiNotificationModule,l.TuiTextfieldControllerModule,l.TuiHintControllerModule].concat(_toConsumableArray(c.d),[i.f.forChild(Object(c.m)(D))])]}),P)}}]);