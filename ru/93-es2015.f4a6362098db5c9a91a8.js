(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{vlBO:function(e,t,n){"use strict";n.r(t),n.d(t,"ExampleTuiTextAreaModule",(function(){return X}));var o,a=n("2kYt"),r=n("nIj0"),l=n("sEIs"),i=n("SVIu"),m=n("Qq0t"),d=n("dvRg"),u=n("Piem"),s=n("EM62"),c=n("K/iL"),p=n("WupT"),f=n("OZlg"),x=n("e0eB"),b=n("iyc4"),h=n("oEBb");o=" It has a fixed size and content scroll by default. But there is also an expandable mode with height increase from content inside\n";let C=(()=>{class e{constructor(){this.testForm=new r.FormGroup({testValue1:new r.FormControl("A field",r.Validators.required),testValue2:new r.FormControl("This one can be expanded",r.Validators.required)})}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=s["\u0275\u0275defineComponent"]({type:e,selectors:[["tui-text-area-example-1"]],decls:10,vars:2,consts:[[1,"container",3,"formGroup"],[1,"tui-row"],[1,"tui-col_md-6"],["formControlName","testValue1"],["formControlName","testValue2",3,"expandable"]],template:function(e,t){1&e&&(s["\u0275\u0275elementStart"](0,"p"),s["\u0275\u0275i18n"](1,o),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](2,"form",0),s["\u0275\u0275elementStart"](3,"div",1),s["\u0275\u0275elementStart"](4,"div",2),s["\u0275\u0275elementStart"](5,"tui-text-area",3),s["\u0275\u0275text"](6,"Type a text"),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](7,"div",2),s["\u0275\u0275elementStart"](8,"tui-text-area",4),s["\u0275\u0275text"](9,"Type a text"),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"]()),2&e&&(s["\u0275\u0275advance"](2),s["\u0275\u0275property"]("formGroup",t.testForm),s["\u0275\u0275advance"](6),s["\u0275\u0275property"]("expandable",!0))},directives:[r["\u0275angular_packages_forms_forms_y"],r.NgControlStatusGroup,r.FormGroupDirective,h.a,r.NgControlStatus,r.FormControlName],styles:["[_nghost-%COMP%]{display:block}.container[_ngcontent-%COMP%]{margin-bottom:20px;max-width:700px}"],changeDetection:0}),e})();var g;g="You can set a custom min-height for component";let y=(()=>{class e{constructor(){this.testForm=new r.FormGroup({testValue1:new r.FormControl("A field",r.Validators.required)})}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=s["\u0275\u0275defineComponent"]({type:e,selectors:[["tui-text-area-example-2"]],decls:9,vars:2,consts:[[3,"formGroup"],[1,"tui-row"],[1,"tui-col_md-6"],["formControlName","testValue1",1,"tui-space_bottom-4","field-large"],["formControlName","testValue1",1,"field-small",3,"expandable"]],template:function(e,t){1&e&&(s["\u0275\u0275elementStart"](0,"p"),s["\u0275\u0275i18n"](1,g),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](2,"form",0),s["\u0275\u0275elementStart"](3,"div",1),s["\u0275\u0275elementStart"](4,"div",2),s["\u0275\u0275elementStart"](5,"tui-text-area",3),s["\u0275\u0275text"](6," Type a text "),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](7,"tui-text-area",4),s["\u0275\u0275text"](8," Type a text "),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"]()),2&e&&(s["\u0275\u0275advance"](2),s["\u0275\u0275property"]("formGroup",t.testForm),s["\u0275\u0275advance"](5),s["\u0275\u0275property"]("expandable",!0))},directives:[r["\u0275angular_packages_forms_forms_y"],r.NgControlStatusGroup,r.FormGroupDirective,h.a,r.NgControlStatus,r.FormControlName],styles:[".field-large[_ngcontent-%COMP%]{min-height:150px}.field-small[_ngcontent-%COMP%]{min-height:56px}"],changeDetection:0}),e})();var T,v=n("1Nkj"),S=n("gEyt");T="You can use label outside mode with " + "\ufffd#2\ufffd" + "tuiLabel" + "\ufffd/#2\ufffd" + "";let E=(()=>{class e{constructor(){this.testForm=new r.FormGroup({testValue1:new r.FormControl("A field",r.Validators.required)})}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=s["\u0275\u0275defineComponent"]({type:e,selectors:[["tui-text-area-example-3"]],decls:6,vars:2,consts:[[1,"tui-row",3,"formGroup"],["tuiLabel","","label","Type a text",1,"tui-col_md-6"],["formControlName","testValue1",1,"tui-space_bottom-4",3,"tuiTextfieldLabelOutside"]],template:function(e,t){1&e&&(s["\u0275\u0275elementStart"](0,"p"),s["\u0275\u0275i18nStart"](1,T),s["\u0275\u0275element"](2,"code"),s["\u0275\u0275i18nEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](3,"form",0),s["\u0275\u0275elementStart"](4,"label",1),s["\u0275\u0275element"](5,"tui-text-area",2),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"]()),2&e&&(s["\u0275\u0275advance"](3),s["\u0275\u0275property"]("formGroup",t.testForm),s["\u0275\u0275advance"](2),s["\u0275\u0275property"]("tuiTextfieldLabelOutside",!0))},directives:[r["\u0275angular_packages_forms_forms_y"],r.NgControlStatusGroup,r.FormGroupDirective,v.a,h.a,r.NgControlStatus,r.FormControlName,S.b],styles:[".field[_ngcontent-%COMP%]{min-height:56px}"],changeDetection:0}),e})();var w=n("EPR0"),F=n("pQcr"),V=n("KzL3"),_=n("2wTY"),M=n("RlDx"),G=n("yHor"),A=n("zGJC"),D=n("FSyC"),O=n("u8jZ");const P=["header","TextArea"];var L;L=" Textfield for multiline input. It can be expanded from its content. ";const N=["heading","A simple field and expandable"],z=["heading","Custom size"],$=["heading","With label outside"];function I(e,t){if(1&e&&(s["\u0275\u0275elementStart"](0,"p"),s["\u0275\u0275i18n"](1,L),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](2,"tui-doc-example",2),s["\u0275\u0275i18nAttributes"](3,N),s["\u0275\u0275element"](4,"tui-text-area-example-1"),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](5,"tui-doc-example",3),s["\u0275\u0275i18nAttributes"](6,z),s["\u0275\u0275element"](7,"tui-text-area-example-2"),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](8,"tui-doc-example",3),s["\u0275\u0275i18nAttributes"](9,$),s["\u0275\u0275element"](10,"tui-text-area-example-3"),s["\u0275\u0275elementEnd"]()),2&e){const e=s["\u0275\u0275nextContext"]();s["\u0275\u0275advance"](2),s["\u0275\u0275property"]("content",e.example1),s["\u0275\u0275advance"](3),s["\u0275\u0275property"]("content",e.example2),s["\u0275\u0275advance"](3),s["\u0275\u0275property"]("content",e.example3)}}var H,R,k,q,j,B;function U(e,t){1&e&&s["\u0275\u0275i18n"](0,H)}function Y(e,t){1&e&&s["\u0275\u0275i18n"](0,R)}function J(e,t){1&e&&(s["\u0275\u0275i18nStart"](0,k),s["\u0275\u0275element"](1,"code"),s["\u0275\u0275i18nEnd"]())}function K(e,t){if(1&e){const e=s["\u0275\u0275getCurrentView"]();s["\u0275\u0275elementStart"](0,"tui-doc-demo"),s["\u0275\u0275elementStart"](1,"tui-text-area",4),s["\u0275\u0275text"](2," placeholder "),s["\u0275\u0275elementStart"](3,"strong"),s["\u0275\u0275text"](4,"strong text"),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](5,"tui-doc-documentation"),s["\u0275\u0275template"](6,U,1,0,"ng-template",5),s["\u0275\u0275listener"]("documentationPropertyValueChange",(function(t){return s["\u0275\u0275restoreView"](e),s["\u0275\u0275nextContext"]().disabled=t})),s["\u0275\u0275template"](7,Y,1,0,"ng-template",6),s["\u0275\u0275listener"]("documentationPropertyValueChange",(function(t){return s["\u0275\u0275restoreView"](e),s["\u0275\u0275nextContext"]().expandable=t})),s["\u0275\u0275template"](8,J,2,0,"ng-template",7),s["\u0275\u0275listener"]("documentationPropertyValueChange",(function(t){return s["\u0275\u0275restoreView"](e),s["\u0275\u0275nextContext"]().rows=t})),s["\u0275\u0275elementEnd"](),s["\u0275\u0275element"](9,"inherited-documentation")}if(2&e){const e=s["\u0275\u0275nextContext"]();s["\u0275\u0275advance"](1),s["\u0275\u0275property"]("formControl",e.control)("focusable",e.focusable)("tuiTextfieldExampleText",e.exampleText)("tuiTextfieldLabelOutside",e.labelOutside)("tuiTextfieldMaxLength",e.maxLength)("tuiTextfieldSize",e.size)("expandable",e.expandable)("pseudoInvalid",e.pseudoInvalid)("pseudoFocused",e.pseudoFocused)("pseudoHovered",e.pseudoHovered)("readOnly",e.readOnly)("rows",e.rows)("tuiHintContent",e.hintContent)("tuiHintDirection",e.hintDirection)("tuiHintMode",e.hintMode),s["\u0275\u0275advance"](5),s["\u0275\u0275property"]("documentationPropertyValue",e.disabled),s["\u0275\u0275advance"](1),s["\u0275\u0275property"]("documentationPropertyValue",e.expandable),s["\u0275\u0275advance"](1),s["\u0275\u0275property"]("documentationPropertyValues",e.rowsVariants)("documentationPropertyValue",e.rows)}}function Q(e,t){if(1&e&&(s["\u0275\u0275elementStart"](0,"ol",8),s["\u0275\u0275elementStart"](1,"li"),s["\u0275\u0275elementStart"](2,"p"),s["\u0275\u0275i18nStart"](3,q),s["\u0275\u0275element"](4,"code"),s["\u0275\u0275i18nEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275element"](5,"tui-doc-code",9),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](6,"li"),s["\u0275\u0275elementStart"](7,"p"),s["\u0275\u0275i18nStart"](8,j),s["\u0275\u0275element"](9,"code"),s["\u0275\u0275element"](10,"code"),s["\u0275\u0275i18nEnd"](),s["\u0275\u0275elementEnd"](),s["\u0275\u0275element"](11,"tui-doc-code",10),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementStart"](12,"li"),s["\u0275\u0275elementStart"](13,"p"),s["\u0275\u0275i18n"](14,B),s["\u0275\u0275elementEnd"](),s["\u0275\u0275element"](15,"tui-doc-code",11),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"]()),2&e){const e=s["\u0275\u0275nextContext"]();s["\u0275\u0275advance"](5),s["\u0275\u0275property"]("code",e.exampleImportModule),s["\u0275\u0275advance"](6),s["\u0275\u0275property"]("code",e.exampleDeclareForm),s["\u0275\u0275advance"](4),s["\u0275\u0275property"]("code",e.exampleInsertTemplate)}}H=" Disabled state (formControl.disable()) ",R=" Control height can be expanded to show all content ",k=" A number of visible rows in " + "\ufffd#1\ufffd" + "expandable" + "\ufffd/#1\ufffd" + " mode ",q=" Import " + "\ufffd#4\ufffd" + "TuiTextAreaModule" + "\ufffd/#4\ufffd" + " into a module where you want to use our component ",j=" Declare a form (" + "[\ufffd#9\ufffd|\ufffd#10\ufffd]" + "FormGroup" + "[\ufffd/#9\ufffd|\ufffd/#10\ufffd]" + ") or a control (" + "[\ufffd#9\ufffd|\ufffd#10\ufffd]" + "FormControl" + "[\ufffd/#9\ufffd|\ufffd/#10\ufffd]" + ") in your component: ",j=s["\u0275\u0275i18nPostprocess"](j),B="Add to the template:";let W=(()=>{class e extends p.a{constructor(){super(...arguments),this.example1={TypeScript:"import {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {changeDetection} from '../../../../../change-detection-strategy';\nimport {encapsulation} from '../../../../../view-encapsulation';\n\n@Component({\n    selector: 'tui-text-area-example-1',\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    changeDetection,\n    encapsulation,\n})\nexport class TuiTextAreaExample1 {\n    testForm = new FormGroup({\n        testValue1: new FormControl('A field', Validators.required),\n        testValue2: new FormControl('This one can be expanded', Validators.required),\n    });\n}\n",HTML:'<p i18n>\n    It has a fixed size and content scroll by default. But there is also an\n    expandable mode with height increase from content inside\n</p>\n\n<form class="container" [formGroup]="testForm">\n    <div class="tui-row">\n        <div class="tui-col_md-6">\n            <tui-text-area formControlName="testValue1"\n                >Type a text</tui-text-area\n            >\n        </div>\n        <div class="tui-col_md-6">\n            <tui-text-area formControlName="testValue2" [expandable]="true"\n                >Type a text</tui-text-area\n            >\n        </div>\n    </div>\n</form>\n',LESS:":host {\n    display: block;\n}\n\n.container {\n    margin-bottom: 20px;\n    max-width: 700px;\n}\n"},this.example2={TypeScript:"import {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {changeDetection} from '../../../../../change-detection-strategy';\nimport {encapsulation} from '../../../../../view-encapsulation';\n\n@Component({\n    selector: 'tui-text-area-example-2',\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    changeDetection,\n    encapsulation,\n})\nexport class TuiTextAreaExample2 {\n    testForm = new FormGroup({\n        testValue1: new FormControl('A field', Validators.required),\n    });\n}\n",HTML:'<p i18n>You can set a custom min-height for component</p>\n\n<form [formGroup]="testForm">\n    <div class="tui-row">\n        <div class="tui-col_md-6">\n            <tui-text-area\n                class="tui-space_bottom-4 field-large"\n                formControlName="testValue1"\n            >\n                Type a text\n            </tui-text-area>\n            <tui-text-area\n                class="field-small"\n                formControlName="testValue1"\n                [expandable]="true"\n            >\n                Type a text\n            </tui-text-area>\n        </div>\n    </div>\n</form>\n',LESS:".field-large {\n    min-height: 150px;\n}\n\n.field-small {\n    min-height: 56px;\n}\n"},this.example3={TypeScript:"import {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {changeDetection} from '../../../../../change-detection-strategy';\nimport {encapsulation} from '../../../../../view-encapsulation';\n\n@Component({\n    selector: 'tui-text-area-example-3',\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    changeDetection,\n    encapsulation,\n})\nexport class TuiTextAreaExample3 {\n    testForm = new FormGroup({\n        testValue1: new FormControl('A field', Validators.required),\n    });\n}\n",HTML:'<p i18n>You can use label outside mode with <code>tuiLabel</code></p>\n\n<form class="tui-row" [formGroup]="testForm">\n    <label tuiLabel class="tui-col_md-6" label="Type a text">\n        <tui-text-area\n            class="tui-space_bottom-4"\n            formControlName="testValue1"\n            [tuiTextfieldLabelOutside]="true"\n        ></tui-text-area>\n    </label>\n</form>\n',LESS:".field {\n    min-height: 56px;\n}\n"},this.exampleImportModule="import {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiTextAreaModule} from '@taiga-ui/kit';\n\n...\n\n@NgModule({\n    imports: [\n        ...\n        FormsModule,\n        ReactiveFormsModule,\n        TuiTextAreaModule\n    ],\n...\n",this.exampleInsertTemplate='<div [formGroup]="testForm">\n    <tui-text-area formControlName="testValue"\n                   [expandable]="true"\n                   [rows]="10"></tui-text-area>\n</div>\n',this.exampleDeclareForm="import {FormControl, FormGroup} from '@angular/forms';\n\n...\n\n@Component({\n    ...\n})\nexport class MyComponent {\n    testForm = new FormGroup({\n        testValue: new FormControl('Content')\n    });\n}\n",this.maxLengthVariants=[50,100,500],this.maxLength=null,this.rowsVariants=[8,15,30],this.rows=this.rowsVariants[0],this.expandable=!1,this.control=new r.FormControl("aaa",r.Validators.maxLength(10)),this.sizeVariants=["m","l"],this.size=this.sizeVariants[1]}}return e.\u0275fac=function(t){return Z(t||e)},e.\u0275cmp=s["\u0275\u0275defineComponent"]({type:e,selectors:[["example-tui-text-area"]],features:[s["\u0275\u0275ProvidersFeature"]([{provide:c.a,useExisting:Object(s.forwardRef)(()=>e)}]),s["\u0275\u0275InheritDefinitionFeature"]],decls:5,vars:0,consts:[["package","KIT",6,"header"],["pageTab",""],["id","base",3,"content",6,"heading"],["id","large",3,"content",6,"heading"],[1,"b-form",3,"formControl","focusable","tuiTextfieldExampleText","tuiTextfieldLabelOutside","tuiTextfieldMaxLength","tuiTextfieldSize","expandable","pseudoInvalid","pseudoFocused","pseudoHovered","readOnly","rows","tuiHintContent","tuiHintDirection","tuiHintMode"],["documentationPropertyName","disabled","documentationPropertyMode","input","documentationPropertyType","boolean",3,"documentationPropertyValue","documentationPropertyValueChange"],["documentationPropertyName","expandable","documentationPropertyMode","input","documentationPropertyType","boolean",3,"documentationPropertyValue","documentationPropertyValueChange"],["documentationPropertyName","rows","documentationPropertyMode","input","documentationPropertyType","number",3,"documentationPropertyValues","documentationPropertyValue","documentationPropertyValueChange"],[1,"b-demo-steps"],["filename","myComponent.module.ts",3,"code"],["filename","myComponent.component.ts",3,"code"],["filename","myComponent.template.html",3,"code"]],template:function(e,t){1&e&&(s["\u0275\u0275elementStart"](0,"tui-doc-page",0),s["\u0275\u0275i18nAttributes"](1,P),s["\u0275\u0275template"](2,I,11,3,"ng-template",1),s["\u0275\u0275template"](3,K,10,19,"ng-template",1),s["\u0275\u0275template"](4,Q,16,3,"ng-template",1),s["\u0275\u0275elementEnd"]())},directives:[f.a,x.a,b.a,C,y,E,w.a,h.a,r.NgControlStatus,r.FormControlDirective,F.b,S.b,V.b,_.b,M.a,G.a,A.a,D.a,O.a],encapsulation:2,changeDetection:0}),e})();const Z=s["\u0275\u0275getInheritedFactory"](W);let X=(()=>{class e{}return e.\u0275mod=s["\u0275\u0275defineNgModule"]({type:e}),e.\u0275inj=s["\u0275\u0275defineInjector"]({factory:function(t){return new(t||e)},imports:[[d.TuiTextAreaModule,...i.d,u.a,r.ReactiveFormsModule,r.FormsModule,m.TuiSvgModule,a.c,d.TuiRadioListModule,m.TuiButtonModule,m.TuiLinkModule,m.TuiLabelModule,m.TuiTextfieldControllerModule,m.TuiHintControllerModule,l.f.forChild(Object(i.m)(W))]]}),e})()}}]);